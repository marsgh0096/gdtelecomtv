# =================================================================
# ==              库存监控脚本的 GitHub Actions 工作流             ==
# =================================================================

# 工作流的名称
name: Stock Monitor CI

# 触发工作流的事件
on:
  # 1. 允许在 Actions 标签页手动点击 "Run workflow" 来触发
  workflow_dispatch:
  
  # 2. 定时触发
  schedule:
    # 使用 Cron 语法，设置为每5分钟运行一次
    # 分钟 小时 日 月 星期
    - cron: '*/5 * * * *'

# 定义工作流中的任务
jobs:
  # 任务的ID，可以自定义，这里叫 "build"
  build:
    # 指定运行任务的虚拟服务器环境
    runs-on: ubuntu-latest

    # 任务中要执行的一系列步骤
    steps:
      # 第1步: 检出(下载)你的仓库代码到虚拟环境中
      # 使用官方的 checkout action
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第2步: 设置Python环境
      # 使用官方的 setup-python action
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # 指定要使用的Python版本
          python-version: '3.9'

      # 第3步: 安装Python依赖库
      - name: Install dependencies
        run: |
          # 升级pip工具
          python -m pip install --upgrade pip
          # 根据我们放在py文件夹内的requirements.txt文件来安装库
          pip install -r py/requirements.txt

      # 第4步: 运行你的监控脚本
      - name: Run Stock Monitor
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SOCKS_PROXY_URL: ${{ secrets.SOCKS_PROXY_URL }}
        run: python py/stock_monitor.py
      
      - name: Commit state file
        run: |
          if [ -f notified_state.txt ]; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            
            git add notified_state.txt
            
            git diff --quiet && git diff --staged --quiet || (git commit -m "Update notification state" && git push)
          else
            echo "State file 'notified_state.txt' not found, skipping commit."
          fi
